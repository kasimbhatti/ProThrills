@VERTEX
#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoord;
layout(location = 2) in vec3 objectCentre;
layout(location = 3) in vec3 aNormal;
layout(location = 4) in vec3 inColor;

vec3 rotate_vector( vec4 quat, vec3 vec )
{
return vec + 2.0 * cross( cross( vec, quat.xyz ) + quat.w * vec, quat.xyz );
}

out vec2 v_TexCoord;
out vec3 Normal;
out vec3 FragPos;
out vec3 sentColor;

uniform mat4 u_MVP;
uniform mat4 u_Stretch;
uniform vec3 u_Translation;
uniform vec4 u_Quat;

vec3 pointVector = position - objectCentre;
vec3 rotatedVector = rotate_vector(u_Quat, pointVector);
vec3 rotatedPosition = rotatedVector + objectCentre;
vec4 translatedRotatedPosition = vec4((rotatedPosition + u_Translation), 1.0);

void main()
{
    gl_Position = u_Stretch * u_MVP * translatedRotatedPosition;
    v_TexCoord = texCoord;
    FragPos = vec3(gl_Position);
    Normal = aNormal;
    sentColor = inColor;
};


@FRAGMENT
#version 330 core

layout(location = 0) out vec4 color;

in vec2 v_TexCoord;
in vec3 Normal;
in vec3 FragPos;
in vec3 sentColor;

vec3 norm = normalize(Normal);

uniform vec3 lightPos;

vec3 lightDir = normalize(lightPos - FragPos);
float diff = max(dot(norm, lightDir), 0.0);
vec3 lightColor = vec3(1, 0.957, 0.898);
vec3 diffuse = diff * lightColor;

vec3 viewPos = vec3(0.0, 0.0, 0.0);
vec3 viewDir = normalize(viewPos = FragPos);
float specularStrength = 0.6;
vec3 reflectDir = reflect(-lightDir, norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
vec3 specular = specularStrength * spec * lightColor;

float ambientStrength = 0.3;
vec3 ambient = ambientStrength * lightColor;

uniform sampler2D u_Texture;


void main()
{
    vec4 texColor = texture(u_Texture, v_TexCoord);
    color = texColor * vec4(sentColor, 1.0);
    vec3 result = (ambient + diffuse + specular) * vec3(color);
    color = vec4(result, 1.0);

};